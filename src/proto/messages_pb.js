/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.messages.Agreement', null, global);
goog.exportSymbol('proto.messages.AraId', null, global);
goog.exportSymbol('proto.messages.Quote', null, global);
goog.exportSymbol('proto.messages.Receipt', null, global);
goog.exportSymbol('proto.messages.Reward', null, global);
goog.exportSymbol('proto.messages.SOW', null, global);
goog.exportSymbol('proto.messages.Signature', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.SOW = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.SOW, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.SOW.displayName = 'proto.messages.SOW';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.SOW.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.SOW.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.SOW} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.SOW.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    workUnit: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requester: (f = msg.getRequester()) && proto.messages.AraId.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.SOW}
 */
proto.messages.SOW.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.SOW;
  return proto.messages.SOW.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.SOW} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.SOW}
 */
proto.messages.SOW.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkUnit(value);
      break;
    case 3:
      var value = new proto.messages.AraId;
      reader.readMessage(value,proto.messages.AraId.deserializeBinaryFromReader);
      msg.setRequester(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.SOW.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messages.SOW.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messages.SOW} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.SOW.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getWorkUnit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequester();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.messages.AraId.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.messages.SOW.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.messages.SOW.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.messages.SOW.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.SOW.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string work_unit = 2;
 * @return {string}
 */
proto.messages.SOW.prototype.getWorkUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.messages.SOW.prototype.setWorkUnit = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional AraId requester = 3;
 * @return {?proto.messages.AraId}
 */
proto.messages.SOW.prototype.getRequester = function() {
  return /** @type{?proto.messages.AraId} */ (
    jspb.Message.getWrapperField(this, proto.messages.AraId, 3));
};


/** @param {?proto.messages.AraId|undefined} value */
proto.messages.SOW.prototype.setRequester = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.messages.SOW.prototype.clearRequester = function() {
  this.setRequester(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.SOW.prototype.hasRequester = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.messages.SOW.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.messages.SOW.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.messages.SOW.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.SOW.prototype.setData = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.Quote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.Quote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.Quote.displayName = 'proto.messages.Quote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.Quote.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.Quote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.Quote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Quote.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    perUnitCost: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sow: (f = msg.getSow()) && proto.messages.SOW.toObject(includeInstance, f),
    farmer: (f = msg.getFarmer()) && proto.messages.AraId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.Quote}
 */
proto.messages.Quote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.Quote;
  return proto.messages.Quote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.Quote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.Quote}
 */
proto.messages.Quote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPerUnitCost(value);
      break;
    case 3:
      var value = new proto.messages.SOW;
      reader.readMessage(value,proto.messages.SOW.deserializeBinaryFromReader);
      msg.setSow(value);
      break;
    case 4:
      var value = new proto.messages.AraId;
      reader.readMessage(value,proto.messages.AraId.deserializeBinaryFromReader);
      msg.setFarmer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.Quote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messages.Quote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messages.Quote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Quote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPerUnitCost();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSow();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.messages.SOW.serializeBinaryToWriter
    );
  }
  f = message.getFarmer();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.messages.AraId.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Quote.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.messages.Quote.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.messages.Quote.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.Quote.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 per_unit_cost = 2;
 * @return {number}
 */
proto.messages.Quote.prototype.getPerUnitCost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.messages.Quote.prototype.setPerUnitCost = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SOW sow = 3;
 * @return {?proto.messages.SOW}
 */
proto.messages.Quote.prototype.getSow = function() {
  return /** @type{?proto.messages.SOW} */ (
    jspb.Message.getWrapperField(this, proto.messages.SOW, 3));
};


/** @param {?proto.messages.SOW|undefined} value */
proto.messages.Quote.prototype.setSow = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.messages.Quote.prototype.clearSow = function() {
  this.setSow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Quote.prototype.hasSow = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AraId farmer = 4;
 * @return {?proto.messages.AraId}
 */
proto.messages.Quote.prototype.getFarmer = function() {
  return /** @type{?proto.messages.AraId} */ (
    jspb.Message.getWrapperField(this, proto.messages.AraId, 4));
};


/** @param {?proto.messages.AraId|undefined} value */
proto.messages.Quote.prototype.setFarmer = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.messages.Quote.prototype.clearFarmer = function() {
  this.setFarmer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Quote.prototype.hasFarmer = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.Agreement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.Agreement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.Agreement.displayName = 'proto.messages.Agreement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.Agreement.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.Agreement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.Agreement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Agreement.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    quote: (f = msg.getQuote()) && proto.messages.Quote.toObject(includeInstance, f),
    requesterSignature: (f = msg.getRequesterSignature()) && proto.messages.Signature.toObject(includeInstance, f),
    farmerSignature: (f = msg.getFarmerSignature()) && proto.messages.Signature.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.Agreement}
 */
proto.messages.Agreement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.Agreement;
  return proto.messages.Agreement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.Agreement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.Agreement}
 */
proto.messages.Agreement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = new proto.messages.Quote;
      reader.readMessage(value,proto.messages.Quote.deserializeBinaryFromReader);
      msg.setQuote(value);
      break;
    case 3:
      var value = new proto.messages.Signature;
      reader.readMessage(value,proto.messages.Signature.deserializeBinaryFromReader);
      msg.setRequesterSignature(value);
      break;
    case 4:
      var value = new proto.messages.Signature;
      reader.readMessage(value,proto.messages.Signature.deserializeBinaryFromReader);
      msg.setFarmerSignature(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.Agreement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messages.Agreement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messages.Agreement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Agreement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getQuote();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.messages.Quote.serializeBinaryToWriter
    );
  }
  f = message.getRequesterSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.messages.Signature.serializeBinaryToWriter
    );
  }
  f = message.getFarmerSignature();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.messages.Signature.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Agreement.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.messages.Agreement.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.messages.Agreement.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.Agreement.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Quote quote = 2;
 * @return {?proto.messages.Quote}
 */
proto.messages.Agreement.prototype.getQuote = function() {
  return /** @type{?proto.messages.Quote} */ (
    jspb.Message.getWrapperField(this, proto.messages.Quote, 2));
};


/** @param {?proto.messages.Quote|undefined} value */
proto.messages.Agreement.prototype.setQuote = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.messages.Agreement.prototype.clearQuote = function() {
  this.setQuote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Agreement.prototype.hasQuote = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Signature requester_signature = 3;
 * @return {?proto.messages.Signature}
 */
proto.messages.Agreement.prototype.getRequesterSignature = function() {
  return /** @type{?proto.messages.Signature} */ (
    jspb.Message.getWrapperField(this, proto.messages.Signature, 3));
};


/** @param {?proto.messages.Signature|undefined} value */
proto.messages.Agreement.prototype.setRequesterSignature = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.messages.Agreement.prototype.clearRequesterSignature = function() {
  this.setRequesterSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Agreement.prototype.hasRequesterSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Signature farmer_signature = 4;
 * @return {?proto.messages.Signature}
 */
proto.messages.Agreement.prototype.getFarmerSignature = function() {
  return /** @type{?proto.messages.Signature} */ (
    jspb.Message.getWrapperField(this, proto.messages.Signature, 4));
};


/** @param {?proto.messages.Signature|undefined} value */
proto.messages.Agreement.prototype.setFarmerSignature = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.messages.Agreement.prototype.clearFarmerSignature = function() {
  this.setFarmerSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Agreement.prototype.hasFarmerSignature = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Agreement.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.messages.Agreement.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.messages.Agreement.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.Agreement.prototype.setData = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.Reward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.Reward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.Reward.displayName = 'proto.messages.Reward';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.Reward.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.Reward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.Reward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Reward.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    agreement: (f = msg.getAgreement()) && proto.messages.Agreement.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requesterSignature: (f = msg.getRequesterSignature()) && proto.messages.Signature.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.Reward}
 */
proto.messages.Reward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.Reward;
  return proto.messages.Reward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.Reward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.Reward}
 */
proto.messages.Reward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = new proto.messages.Agreement;
      reader.readMessage(value,proto.messages.Agreement.deserializeBinaryFromReader);
      msg.setAgreement(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = new proto.messages.Signature;
      reader.readMessage(value,proto.messages.Signature.deserializeBinaryFromReader);
      msg.setRequesterSignature(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.Reward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messages.Reward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messages.Reward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Reward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAgreement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.messages.Agreement.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getRequesterSignature();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.messages.Signature.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Reward.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.messages.Reward.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.messages.Reward.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.Reward.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Agreement agreement = 2;
 * @return {?proto.messages.Agreement}
 */
proto.messages.Reward.prototype.getAgreement = function() {
  return /** @type{?proto.messages.Agreement} */ (
    jspb.Message.getWrapperField(this, proto.messages.Agreement, 2));
};


/** @param {?proto.messages.Agreement|undefined} value */
proto.messages.Reward.prototype.setAgreement = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.messages.Reward.prototype.clearAgreement = function() {
  this.setAgreement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Reward.prototype.hasAgreement = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.messages.Reward.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.messages.Reward.prototype.setAmount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Signature requester_signature = 4;
 * @return {?proto.messages.Signature}
 */
proto.messages.Reward.prototype.getRequesterSignature = function() {
  return /** @type{?proto.messages.Signature} */ (
    jspb.Message.getWrapperField(this, proto.messages.Signature, 4));
};


/** @param {?proto.messages.Signature|undefined} value */
proto.messages.Reward.prototype.setRequesterSignature = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.messages.Reward.prototype.clearRequesterSignature = function() {
  this.setRequesterSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Reward.prototype.hasRequesterSignature = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Reward.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes data = 5;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.messages.Reward.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.messages.Reward.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.Reward.prototype.setData = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.Receipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.Receipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.Receipt.displayName = 'proto.messages.Receipt';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.Receipt.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.Receipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.Receipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Receipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    reward: (f = msg.getReward()) && proto.messages.Reward.toObject(includeInstance, f),
    farmerSignature: (f = msg.getFarmerSignature()) && proto.messages.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.Receipt}
 */
proto.messages.Receipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.Receipt;
  return proto.messages.Receipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.Receipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.Receipt}
 */
proto.messages.Receipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = new proto.messages.Reward;
      reader.readMessage(value,proto.messages.Reward.deserializeBinaryFromReader);
      msg.setReward(value);
      break;
    case 3:
      var value = new proto.messages.Signature;
      reader.readMessage(value,proto.messages.Signature.deserializeBinaryFromReader);
      msg.setFarmerSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.Receipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messages.Receipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messages.Receipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Receipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getReward();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.messages.Reward.serializeBinaryToWriter
    );
  }
  f = message.getFarmerSignature();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.messages.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Receipt.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.messages.Receipt.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.messages.Receipt.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.Receipt.prototype.setNonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Reward reward = 2;
 * @return {?proto.messages.Reward}
 */
proto.messages.Receipt.prototype.getReward = function() {
  return /** @type{?proto.messages.Reward} */ (
    jspb.Message.getWrapperField(this, proto.messages.Reward, 2));
};


/** @param {?proto.messages.Reward|undefined} value */
proto.messages.Receipt.prototype.setReward = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.messages.Receipt.prototype.clearReward = function() {
  this.setReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Receipt.prototype.hasReward = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Signature farmer_signature = 3;
 * @return {?proto.messages.Signature}
 */
proto.messages.Receipt.prototype.getFarmerSignature = function() {
  return /** @type{?proto.messages.Signature} */ (
    jspb.Message.getWrapperField(this, proto.messages.Signature, 3));
};


/** @param {?proto.messages.Signature|undefined} value */
proto.messages.Receipt.prototype.setFarmerSignature = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.messages.Receipt.prototype.clearFarmerSignature = function() {
  this.setFarmerSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Receipt.prototype.hasFarmerSignature = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.Signature.displayName = 'proto.messages.Signature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    araId: (f = msg.getAraId()) && proto.messages.AraId.toObject(includeInstance, f),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.Signature}
 */
proto.messages.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.Signature;
  return proto.messages.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.Signature}
 */
proto.messages.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.messages.AraId;
      reader.readMessage(value,proto.messages.AraId.deserializeBinaryFromReader);
      msg.setAraId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messages.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messages.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAraId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.messages.AraId.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional AraId ara_id = 1;
 * @return {?proto.messages.AraId}
 */
proto.messages.Signature.prototype.getAraId = function() {
  return /** @type{?proto.messages.AraId} */ (
    jspb.Message.getWrapperField(this, proto.messages.AraId, 1));
};


/** @param {?proto.messages.AraId|undefined} value */
proto.messages.Signature.prototype.setAraId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.messages.Signature.prototype.clearAraId = function() {
  this.setAraId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.messages.Signature.prototype.hasAraId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.messages.Signature.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.messages.Signature.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.messages.Signature.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.messages.Signature.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.messages.AraId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.messages.AraId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.messages.AraId.displayName = 'proto.messages.AraId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.messages.AraId.prototype.toObject = function(opt_includeInstance) {
  return proto.messages.AraId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.messages.AraId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.AraId.toObject = function(includeInstance, msg) {
  var f, obj = {
    did: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.messages.AraId}
 */
proto.messages.AraId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.messages.AraId;
  return proto.messages.AraId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.messages.AraId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.messages.AraId}
 */
proto.messages.AraId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.messages.AraId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.messages.AraId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.messages.AraId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.messages.AraId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string did = 1;
 * @return {string}
 */
proto.messages.AraId.prototype.getDid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.messages.AraId.prototype.setDid = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.messages);
